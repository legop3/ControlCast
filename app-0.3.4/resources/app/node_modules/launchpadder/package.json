{
  "_args": [
    [
      {
        "raw": "launchpadder@latest",
        "scope": null,
        "escapedName": "launchpadder",
        "name": "launchpadder",
        "rawSpec": "latest",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Projects\\Versioned\\ControlCast\\controlcast"
    ]
  ],
  "_from": "launchpadder@latest",
  "_id": "launchpadder@0.0.5",
  "_inCache": true,
  "_location": "/launchpadder",
  "_npmUser": {
    "name": "stevenleeg",
    "email": "stevenleeg@gmail.com"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {},
  "_requested": {
    "raw": "launchpadder@latest",
    "scope": null,
    "escapedName": "launchpadder",
    "name": "launchpadder",
    "rawSpec": "latest",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/launchpadder/-/launchpadder-0.0.5.tgz",
  "_shasum": "d231bcb4f5b583c376874393469ddab18b790d74",
  "_shrinkwrap": null,
  "_spec": "launchpadder@latest",
  "_where": "C:\\Projects\\Versioned\\ControlCast\\controlcast",
  "author": {
    "name": "Steve Gattuso",
    "email": "steve@stevegattuso.me",
    "url": "http://stevegattuso.me"
  },
  "bugs": {
    "url": "https://github.com/stevenleeg/launchpadder/issues"
  },
  "dependencies": {
    "midi": ">= 0.6.0"
  },
  "description": "A library for making the Novation Launchpad incredibly easy to play with.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d231bcb4f5b583c376874393469ddab18b790d74",
    "tarball": "https://registry.npmjs.org/launchpadder/-/launchpadder-0.0.5.tgz"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "homepage": "https://github.com/stevenleeg/launchpadder#readme",
  "main": "launchpadder.js",
  "maintainers": [
    {
      "name": "stevenleeg",
      "email": "stevenleeg@gmail.com"
    }
  ],
  "name": "launchpadder",
  "optionalDependencies": {},
  "readme": "# Launchpadder\nA node library for interacting with the [Novation Launchpad](http://global.novationmusic.com/midi-controllers-digital-dj/launchpad).\n\n# Installing\nYou can install Launchpadder via npm:\n\n```shell\n$ npm install launchpadder\n```\n\n# Usage\nI tried to make usage as straightforward as possible:\n\n```javascript\nvar launchpadder = require(\"./launchpadder\").Launchpad;\nvar launchpadColor = require(\"./launchpadder\").Color;\n\n// The 0 represents the MIDI port to connect with\n// The 1 represents the MIDI output-port to connect with\n// Both these are optional and default to 0\nvar pad = new launchpadder(0, 1);\n\npad.on(\"press\", function(button) {\n    button.light(launchpadColor.RED);\n    console.log(button + \" was pressed\");\n});\n\npad.on(\"release\", function(button) {\n    button.dark();\n    console.log(button + \" was released\");\n});\n```\n\n# Documentation\nLaunchpadder was made because I felt that such a simple piece of hardware should also have a simple API behind it. If you feel that any part of the software doesn't follow this philosphy, feel free to open an issue and I'll look into it. So without further adieu, the Launchpadder API:\n\n## `Launchpad` class\nRepresents the launchpad as a whole.\n\n### `Launchpad([int midi_in], [int midi_out])`\nConstructor. To create a new instance of the Launchpad class you may include a midi port to connect to (probably 0, unless you have a much cooler MIDI setup than I do). Both of these values are optional, however.\n\n### `getButton(int x, [int y])`\nGets the button at coordinate x, y. If y is undefined, the method assumes you are providing it with a Launchpad-specific MIDI note and will attempt to convert it into x, y coordinates.\n\n### `allDark()`\nSets all of the LEDs to dark. This method works by sending the reset command to the Launchpad (not sending Color.OFF to each button).\n\n### `getX(note)`\nReturns the X-coordinate for a Launchpad-specific MIDI note.\n\n### `getY(note)`\nReturns the Y-coordinate for a Launchpad-specific MIDI note.\n\n### Events\nThis class also inherits methods frome Node's [event.EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter). Possible events to listen for are:\n\n * `press`\n * `release`\n\nBoth events emit the button object as an argument. Eg:\n\n```javascript\nlaunchpad.on(\"press\", function(button) {\n    // Do something awesome...\n})\n```\n\n## `Button` class\nRepresents each individual button on the launchpad. Only obtainable through the `Launchpad` class.\n\n### `getX()`\nReturns the X-coordinate of the button.\n\n### `getY()`\nReturns the Y-coordinate of the button.\n\n### `light([int color])`\nTurns on the button's LED with the specified color (see `Color` object for color constants). If no color is provided, it defaults to amber.\n\n### `dark()`\nTurns off the button's LED.\n\n### `isLit([int color])`\nReturns true when the Button is lit up. Optionally: specify \"color\" to validate against a certain color.\n\n### `getState()`\nGets the button's current state, returns a MIDI representation of the color. See `Color` class below.\n\n### `toggle([int color], [int color])`\nToggles the button's state between two colors. The first color defaults to amber if unspecified, the second to off. If the current color is neither of the two values, the second value is used.\n\n### `startBlinking([int color])`\nStarts blinking the button in the specified color (defaults to amber). The timeout is set at 500ms.\n\n### `stopBlinking()`\nStops blinking the button.\n\n### `isBlinking()`\nReturns true or false depending if the button is blinking or not.\n\n### `toString()`\nReturns a string representation of the button's coordinates in `(x, y)` format.\n\n### `toNote()`\nConverts the x, y coordinates of the button into the Launchpad-specific MIDI representation. See the `Launchpad` class to get the x and y values back.\n\n### Events\nThis class also inherits methods frome Node's [event.EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter). Possible events to listen for are:\n\n * `press`\n * `release`\n\nBoth events emit the button object as an argument (much like the Launchpad class).\n\n## `Color` class\nRepresents a Launchpad-specific MIDI color.\n\n### `getColor([int red], [int green])`\nReturns the MIDI color representing your red and green light values (values can be 0 up to a maximum of 3). Both values default to 0, and therefore `getColor()` will return value 12 (which is off; see static colors below).\n\n### `getGreen(int note)`\nReturns the green value (0 to 3) of the specified MIDI note.\n\n### `getRed(int note)`\nReturns the red value (0 to 3) of the specified MIDI note.\n\nLaunchpadder comes with several static values stored in the `Color` class which can be used to light up buttons.\n\n * `#OFF`: 12\n * `#LOW_RED`: 13\n * `#RED`: 15\n * `#LOW_AMBER`: 29\n * `#AMBER`: 63\n * `#LOW_GREEN`: 28\n * `#GREEN`: 60\n * `#YELLOW`: 62\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stevenleeg/launchpadder.git"
  },
  "version": "0.0.5"
}
